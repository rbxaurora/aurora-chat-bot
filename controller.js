const Black = require(`./models/Black`);
const Anket = require(`./models/Anket`);
const Session = require(`./models/Session`);
const axios = require(`axios`);
const createDebug = require(`debug`);

class controller {
	async start (ctx) {
		const chatId = ctx.message.chat.id;
		const userId = ctx.message.from.id;
		const userName = ctx.message.from.first_name;

		const user = await Black.findOne({ userId: userId });

		if (user) {
			return ctx.telegram.sendMessage(chatId, `‚ùå–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –•–∞—É—Å–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç-–±–æ—Ç—É <b>–∑–∞–ø—Ä–µ—â–µ–Ω</b>.`, {
				parse_mode: 'HTML'
			});
		}

		ctx.telegram.sendMessage(chatId, `<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}üëã</b>\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ${ctx.botInfo.first_name} –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π AURORA TEAM. –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ –•–∞—É—Å.\n\n‚Ñπ–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å—Ç—É–ø–∏—Ç—å –≤ –•–∞—É—Å", –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ.\n\n<i>‚Äº–í–∞–∂–Ω–æ: –ê–Ω–∫–µ—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–æ—Å–∏—Ç –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –∏ –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –•–∞—É—Å–∞.</i>`, {
			parse_mode: 'HTML'
		});

		return ctx.telegram.sendMessage(chatId, `‚ú®–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. \n\n–í–∞–∂–Ω–æ: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!`, {
			reply_markup: {
				inline_keyboard: [
					[{
						text: '–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã',
						callback_data: 'anketa'
					}]
				]
			},
			parse_mode: 'HTML'
		});
	}

	async callbackQuery (ctx) {
		const chatId = ctx.callbackQuery.message.chat.id;
		const userId = ctx.callbackQuery.from.id;
		const data = ctx.callbackQuery.data;
		const queryId = ctx.callbackQuery.id;
		const msgId = ctx.callbackQuery.message.message_id;

	    const user = await Anket.findOne({ userId: userId });

	    if (data == 'anketa' && user) {
	    	return ctx.telegram.answerCbQuery(queryId, `‚õî–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É!`);
	    }
	    
	    if (data == `anketa` && !user) {
	        return this.anketa(ctx);
	    }
	    
	    if (data.includes(`accept`)) {
	        return this.acceptAnket(ctx);
	    }

	    if (data.includes(`decline`)) {
	        return this.declineAnket(ctx);
	    }

	    if (data.includes(`notage`)) {
	        return this.declineNotAge(ctx);
	    }

	    if (data.includes(`noanket`)) {
	        return this.declineNoAnket(ctx);
	    }

	    if (data.includes(`blacklist`)) {
	        return this.declineBlack(ctx);
	    }

	    if (data == 'roblox_NO') {
	    	await ctx.telegram.deleteMessage(chatId, msgId);
	    	return ctx.telegram.sendMessage(chatId, `üíå–í–æ–ø—Ä–æ—Å || 5\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ Roblox.`);
	    }

	    if (data == 'roblox_YES') {
	    	await ctx.telegram.deleteMessage(chatId, msgId);

	    	const session = await Session.findOne({ user_id: userId });
	    	await Anket.updateOne({ userId: userId }, { $set: {
	    		question: 6,
	    		roblox: session?.roblox
	    	} });

	    	await Session.deleteOne({ user_id: userId });

	    	return ctx.telegram.sendMessage(chatId, `üíå–í–æ–ø—Ä–æ—Å || 6\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Å—Ç–∏–ª—å —Å–∫–∏–Ω–∞.`);
	    }
	}

	async anketa (ctx) {
		const chatId = ctx.callbackQuery.message.chat.id;
		const userId = ctx.callbackQuery.from.id;
		ctx.telegram.sendMessage(chatId, `‚úÖ<b>–ì–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã!</b>\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ñ–æ—Ä–º—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫, –∏–Ω–∞—á–µ –±–æ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç –í–∞—à—É –∞–Ω–∫–µ—Ç—É –∏ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.</i>\n\nüíå–í –æ—Ç–≤–µ—Ç–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–æ–≤, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ GIF-–∫–∞—Ä—Ç–∏–Ω–æ–∫.`, {
            parse_mode: 'HTML'
        });

        let question = `üíå–í–æ–ø—Ä–æ—Å || 1\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.`;

        const user = new Anket({
            userId: userId,
            question: 1
        });

        await user.save();

        setTimeout(async () => {
            ctx.telegram.sendMessage(chatId, question);
        }, 5000);
	}

	async anketUpdate (ctx) {
		const chatId = ctx.message.chat.id;
		const userId = ctx.message.from.id;

		const user = await Anket.findOne({ userId: userId });

		if (user.question == 1) {
			let name = ctx.message.text;
			let question = `üíå–í–æ–ø—Ä–æ—Å || 2\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç.`;

			await Anket.updateOne({ userId: userId }, { $set: { question: 2, name: name } });
			return ctx.telegram.sendMessage(chatId, question);
		}

		if (user.question == 2) {
			if (isNaN(ctx.message.text)) {
				return ctx.telegram.sendMessage(chatId, `<b>‚ùå–í–≤–µ–¥–µ–Ω—ã–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.</b>`, {
                    parse_mode: 'HTML'
                });
			}

			let age = ctx.message.text;
			let question = `üíå–í–æ–ø—Ä–æ—Å || 3\n\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ—è–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º –•–∞—É—Å–µ?`;

			await Anket.updateOne({ userId: userId }, { $set: { question: 3, age: age } });
			return ctx.telegram.sendMessage(chatId, question);
		}

		if (user.question == 3) {
			let activity = ctx.message.text;
			let question = `üíå–í–æ–ø—Ä–æ—Å || 4\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ TikTok.`;

			await Anket.updateOne({ userId: userId }, { $set: { question: 4, activity: activity } });
			return ctx.telegram.sendMessage(chatId, question);
		}

		if (user.question == 4) {
			let tiktok = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 5\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ Roblox.`;

            await Anket.updateOne({ userId: userId }, { $set: { question: 5, tiktok: tiktok } });
            return ctx.telegram.sendMessage(chatId, question);
		}

		if (user.question == 5) {
			let roblox = ctx.message.text;
			let msgId;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 6\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Å—Ç–∏–ª—å —Å–∫–∏–Ω–∞.`;

            const res = await ctx.telegram.sendMessage(chatId, `<i>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...</i>`, {
            	parse_mode: 'HTML'
            });
            msgId = res.message_id;

            setTimeout(async () => {
            	const response = await axios.post('https://users.roblox.com/v1/usernames/users', {
	            	usernames: [`${roblox}`],
	            	excludeBannedUsers: true
	            });

            	ctx.telegram.editMessageText(chatId, msgId, undefined, `<i>–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${roblox}...</i>`, {
            		parse_mode: 'HTML'
            	});

	            setTimeout(async () => {
	            	if (!response.data.data[0]) {
		            	ctx.telegram.deleteMessage(chatId, msgId);
		            	return ctx.telegram.sendMessage(chatId, `‚ùå–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Roblox. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫ –≤ Roblox!`);
		            }

		            const req = {
		            	user_id: userId,
		            	roblox: roblox
		            };
		            const session = new Session(req);

		            await session.save();
		          
	            	return ctx.telegram.editMessageText(chatId, msgId, undefined, `–î–∏—Å–ø–ª–µ–π –Ω–∏–∫: <b>${response.data.data[0].displayName}</b>\n–ù–∏–∫–Ω–µ–π–º: <b>${response.data.data[0].name}</b>\nID: <b>${response.data.data[0].id}</b>\n\n<i>–≠—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç?</i>`, {
	            		reply_markup: {
	            			inline_keyboard: [
	            				[{
	            					text: '‚úÖ–î–∞',
	            					callback_data: 'roblox_YES'
	            				},
	            				{
	            					text: '‚õî–ù–µ—Ç',
	            					callback_data: 'roblox_NO'
	            				}]
            				]
	            		},
	            		parse_mode: 'HTML'
	            	});
	            }, 1000)
            }, 1000);
		}
	}

	async acceptAnket (ctx) {
		
	}

	async declineAnket (ctx) {
		
	}

	async declineNotAge (ctx) {
		
	}

	async declineNoAnket (ctx) {
		
	}

	async declineBlack (ctx) {
		
	}
}


module.exports = new controller()